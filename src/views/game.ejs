<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>死亡医院 - 游戏</title>
    <link rel="icon" type="image/png" href="/images/favicon.png">
    <style>
        body {
            font-family: 'Microsoft YaHei', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #1a1a1a;
            color: #fff;
        }
        .game-container {
            background-color: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(255, 0, 0, 0.2);
        }
        .player-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 5px;
        }
        .player-name {
            font-size: 24px;
            font-weight: bold;
            color: #ff3333;
        }
        .health-display {
            display: flex;
            gap: 15px;
            font-size: 36px;
            color: #ff3333;
        }
        .heart {
            transition: all 0.3s ease;
        }
        .heart.broken {
            color: #666;
            animation: heartBeat 0.5s ease-in-out;
        }
        @keyframes heartBeat {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        .controls {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }
        .control-button {
            padding: 12px 30px;
            background-color: #ff3333;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 18px;
            transition: all 0.3s ease;
        }
        .control-button:hover {
            background-color: #cc0000;
            transform: scale(1.05);
        }
        .game-content {
            background-color: rgba(0, 0, 0, 0.5);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .location-info {
            margin-bottom: 30px;
        }
        .location-info h2 {
            font-size: 28px;
            color: #ff3333;
            margin-bottom: 15px;
        }
        .location-info p {
            font-size: 18px;
            line-height: 1.6;
        }
        .options {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-bottom: 30px;
        }
        .option-button {
            padding: 15px 25px;
            font-size: 18px;
            background-color: #ff3333;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            text-align: left;
        }
        .option-button:hover {
            background-color: #cc0000;
            transform: scale(1.02);
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .menu-button {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .menu-button:hover {
            background-color: #c0392b;
        }
        .settings-button {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            padding: 8px;
            transition: transform 0.3s;
        }
        .settings-button:hover {
            transform: rotate(90deg);
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1000;
        }
        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #2c2c2c;
            padding: 20px;
            border-radius: 10px;
            min-width: 300px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }
        .settings-item {
            margin: 20px 0;
        }
        .settings-item label {
            display: block;
            margin-bottom: 10px;
            color: #fff;
        }
        .settings-item input[type="range"] {
            width: 100%;
            margin: 10px 0;
        }
        .settings-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }
        .close-button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        .close-button:hover {
            background-color: #2980b9;
        }
        h2 {
            color: #fff;
            margin-top: 0;
            text-align: center;
        }
        .sound-controls {
            display: flex;
            justify-content: center;
            margin-top: 10px;
        }
        .sound-button {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
            transition: transform 0.3s;
        }
        .sound-button:hover {
            transform: scale(1.1);
        }
        /* 添加按钮点击动画 */
        button[name="choice"] {
            transition: transform 0.2s, opacity 0.2s;
        }
        
        button[name="choice"]:active {
            transform: scale(0.95);
        }
        
        button[name="choice"]:disabled {
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <!-- 音频元素 -->
        <audio id="bgMusic" loop preload="auto" autoplay>
            <source src="/audio/backgroud.mp3" type="audio/mpeg">
            <source src="/audio/backgroud.ogg" type="audio/ogg">
            您的浏览器不支持音频播放。
        </audio>

        <div class="header">
            <div class="player-info">
                <% if (gameState.gameStarted) { %>
                    <div class="player-name">玩家：<%= gameState.playerName %></div>
                    <div class="health-display">
                        <% for(let i = 0; i < 6; i++) { %>
                            <span class="heart <%= i >= gameState.health ? 'broken' : '' %>">♥</span>
                        <% } %>
                    </div>
                <% } %>
            </div>
            <button class="settings-button" onclick="openSettings()">⚙️</button>
        </div>

        <!-- 设置弹窗 -->
        <div id="settingsModal" class="modal">
            <div class="modal-content">
                <h2>设置</h2>
                <div class="settings-item">
                    <label for="volume">音量</label>
                    <input type="range" id="volume" min="0" max="100" value="100">
                    <div class="sound-controls">
                        <button id="toggleSound" class="sound-button">
                            <span id="soundIcon">🔊</span>
                        </button>
                    </div>
                </div>
                <div class="settings-buttons">
                    <form action="/return-to-menu" method="POST" style="display: inline;">
                        <button type="submit" class="menu-button">返回主菜单</button>
                    </form>
                    <button onclick="closeSettings()" class="close-button">关闭</button>
                </div>
            </div>
        </div>

        <div class="game-content">
            <div class="location-info">
                <h2><%= currentLocation.name %></h2>
                <p><%= currentLocation.description %></p>
            </div>

            <div class="options">
                <% Object.entries(currentLocation.options).forEach(([key, option]) => { %>
                    <button 
                        class="option-button" 
                        onclick="handleChoice('<%= key %>')"
                        data-choice="<%= key %>"
                    >
                        <%= option.text %>
                    </button>
                <% }); %>
            </div>
        </div>
    </div>

    <script>
        // 检测是否在微信浏览器中
        function isWeixinBrowser(){
            var ua = navigator.userAgent.toLowerCase();
            return /micromessenger/i.test(ua);
        }

        // 显示微信提示
        function showWeixinTip() {
            if (isWeixinBrowser()) {
                const tip = document.createElement('div');
                tip.style.cssText = `
                    position: fixed;
                    top: 10px;
                    left: 50%;
                    transform: translateX(-50%);
                    background: rgba(0, 0, 0, 0.8);
                    color: white;
                    padding: 10px 20px;
                    border-radius: 5px;
                    z-index: 10000;
                    text-align: center;
                    font-size: 14px;
                    max-width: 90%;
                `;
                tip.innerHTML = '建议使用浏览器打开以获得最佳体验（包括音效）<br>点击右上角"..."，选择"在浏览器中打开"';
                document.body.appendChild(tip);
                
                // 3秒后自动隐藏提示
                setTimeout(() => {
                    tip.style.opacity = '0';
                    tip.style.transition = 'opacity 0.5s';
                    setTimeout(() => tip.remove(), 500);
                }, 3000);
            }
        }

        // 音频控制
        const bgMusic = document.getElementById('bgMusic');
        const volumeSlider = document.getElementById('volume');
        const toggleSoundBtn = document.getElementById('toggleSound');
        const soundIcon = document.getElementById('soundIcon');
        let isMuted = false;

        // 强制设置循环播放
        bgMusic.loop = true;

        // 在页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            // 显示微信提示
            showWeixinTip();

            // 尝试播放音乐
            const startPlaying = async () => {
                try {
                    // 加载保存的音量设置
                    const savedVolume = localStorage.getItem('gameVolume') || 100;
                    volumeSlider.value = savedVolume;
                    bgMusic.volume = savedVolume / 100;
                    
                    if (!isWeixinBrowser()) {
                        await bgMusic.play();
                    }
                } catch (err) {
                    console.log('自动播放失败，等待用户交互');
                    if (!isWeixinBrowser()) {
                        const startAudio = async () => {
                            try {
                                await bgMusic.play();
                                document.removeEventListener('click', startAudio);
                            } catch (error) {
                                console.error('播放失败:', error);
                            }
                        };
                        document.addEventListener('click', startAudio);
                    }
                }
            };
            startPlaying();

            // 预加载下一个场景的数据
            preloadNextLocations();
            
            // 保存按钮原始文本
            document.querySelectorAll('.option-button').forEach(button => {
                button.dataset.originalText = button.textContent;
            });
        });

        // 音量滑块控制
        volumeSlider.addEventListener('input', function() {
            const volume = this.value / 100;
            bgMusic.volume = volume;
            localStorage.setItem('gameVolume', this.value);
            
            // 更新音量图标
            if (volume === 0) {
                soundIcon.textContent = '🔇';
            } else if (volume < 0.5) {
                soundIcon.textContent = '🔉';
            } else {
                soundIcon.textContent = '🔊';
            }
        });

        // 静音切换
        toggleSoundBtn.addEventListener('click', function() {
            isMuted = !isMuted;
            bgMusic.muted = isMuted;
            soundIcon.textContent = isMuted ? '🔇' : '🔊';
        });

        function openSettings() {
            document.getElementById('settingsModal').style.display = 'block';
        }

        function closeSettings() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        // 点击弹窗外部关闭弹窗
        window.onclick = function(event) {
            const modal = document.getElementById('settingsModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }

        // 预加载下一个场景的数据
        async function preloadNextLocations() {
            const options = document.querySelectorAll('.option-button');
            for (const option of options) {
                const choice = option.dataset.choice;
                try {
                    const response = await fetch(`/api/location-data?choice=${choice}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    if (response.ok) {
                        const data = await response.json();
                        sessionStorage.setItem(`location_${choice}`, JSON.stringify(data));
                    }
                } catch (error) {
                    console.error('预加载失败:', error);
                }
            }
        }

        // 处理选项选择
        async function handleChoice(choice) {
            const button = document.querySelector(`button[data-choice="${choice}"]`);
            if (!button || button.disabled) return;

            // 禁用所有按钮
            document.querySelectorAll('.option-button').forEach(btn => {
                btn.disabled = true;
                btn.style.opacity = '0.7';
            });

            // 更新当前按钮状态
            button.textContent = '正在前往...';

            try {
                // 检查是否有预加载的数据
                const cachedData = sessionStorage.getItem(`location_${choice}`);
                if (cachedData) {
                    updateGameContent(JSON.parse(cachedData));
                    // 异步发送选择到服务器
                    fetch('/choice', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ choice })
                    });
                } else {
                    // 如果没有缓存数据，直接从服务器获取
                    const response = await fetch('/choice', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ choice })
                    });

                    if (response.ok) {
                        const data = await response.json();
                        updateGameContent(data);
                    } else {
                        throw new Error('请求失败');
                    }
                }
            } catch (error) {
                console.error('选择处理失败:', error);
                // 恢复按钮状态
                document.querySelectorAll('.option-button').forEach(btn => {
                    btn.disabled = false;
                    btn.style.opacity = '1';
                });
                button.textContent = button.dataset.originalText;
            }
        }

        // 更新游戏内容
        function updateGameContent(data) {
            const { location, gameState } = data;
            
            // 更新位置信息
            document.querySelector('.location-info h2').textContent = location.name;
            document.querySelector('.location-info p').textContent = location.description;

            // 更新选项
            const optionsContainer = document.querySelector('.options');
            optionsContainer.innerHTML = Object.entries(location.options)
                .map(([key, option]) => `
                    <button 
                        class="option-button" 
                        onclick="handleChoice('${key}')"
                        data-choice="${key}"
                    >
                        ${option.text}
                    </button>
                `).join('');

            // 更新游戏状态
            if (gameState.health !== undefined) {
                document.querySelectorAll('.heart').forEach((heart, index) => {
                    heart.classList.toggle('broken', index >= gameState.health);
                });
            }

            // 开始预加载下一个场景
            preloadNextLocations();

            // 滚动到顶部
            window.scrollTo(0, 0);
        }
    </script>
</body>
</html> 